services:
  # Serviço para o DB de ORIGEM (BanVic)
  banvic_db:
    image: postgres:16
    container_name: banvic_db
    environment:
      POSTGRES_DB: banvic
      POSTGRES_USER: data_engineer
      POSTGRES_PASSWORD: v3rysecur&pas5w0rd
    volumes:
      - ./banvic_db_data:/var/lib/postgresql/data
      - ./data_source/banvic.sql:/docker-entrypoint-initdb.d/banvic.sql
    ports:
      - "55432:5432"
    networks:
      - banvic_network

  # Serviço para o DB de Metadados do Airflow
  postgres_airflow_db:
    image: postgres:13
    container_name: postgres_airflow_db
    environment:
      POSTGRES_USER: ${POSTGRES_AIRFLOW_USER}
      POSTGRES_PASSWORD: ${POSTGRES_AIRFLOW_PASSWORD}
      POSTGRES_DB: ${POSTGRES_AIRFLOW_DB}
    volumes:
      - ./airflow_db_data:/var/lib/postgresql/data
    networks:
      - banvic_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow -d airflow_db"]
      interval: 10s
      retries: 5

  # Serviço de inicialização do Airflow
  airflow-init:
    build: .
    container_name: airflow_init
    env_file:
      - ./.env
    volumes:
      - ./dags:/opt/airflow/dags
      - ./data_source:/opt/airflow/data_source
      - ./data_output:/opt/airflow/data_output
      - ./requirements.txt:/opt/airflow/requirements.txt
    entrypoint: /bin/bash
    command:
      - -c
      - |
        airflow db migrate &&
        airflow users create \
          --username admin \
          --firstname Mauricio \
          --lastname User \
          --role Admin \
          --email example@example.com \
          --password admin 
    networks:
      - banvic_network
    depends_on:
      postgres_airflow_db:
        condition: service_healthy

  # Serviço do Webserver do Airflow
  airflow-webserver:
    build: .
    container_name: airflow_webserver
    env_file:
      - ./.env
    restart: always
    depends_on:
        airflow-init:
          condition: service_completed_successfully
    ports:
      - "8080:8080"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./data_source:/opt/airflow/data_source
      - ./data_output:/opt/airflow/data_output
      - ./requirements.txt:/opt/airflow/requirements.txt
    command: airflow webserver
    networks:
      - banvic_network

  # Serviço do Scheduler do Airflow
  airflow-scheduler:
    build: .
    container_name: airflow_scheduler
    env_file:
      - ./.env
    restart: always
    depends_on:
        airflow-init:
          condition: service_completed_successfully
    volumes:
      - ./dags:/opt/airflow/dags
      - ./data_source:/opt/airflow/data_source
      - ./data_output:/opt/airflow/data_output
      - ./requirements.txt:/opt/airflow/requirements.txt
    command: airflow scheduler
    networks:
      - banvic_network

# Rede para comunicação entre os containers
networks:
  banvic_network:
    driver: bridge